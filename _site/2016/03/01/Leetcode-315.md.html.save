<!DOCTYPE html> <html> <head> <meta charset="utf-8"> <meta http-equiv="X-UA-Compatible" content="IE=edge"> <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" /> <!--[if lte IE 9]><meta http-equiv="refresh" content="0;url=/ie.html"><![endif]--> <meta name="author" content=""> <meta name="keywords" content="Leetcode"> <title>Leetcode 315</title> <meta name="description" content="## Letcode 315. Count of Smaller Numbers After Self"> <link href='http://fonts.googleapis.com/css?family=Open+Sans:400,400italic,600|Droid+Sans+Mono' rel='stylesheet' type='text/css'> <link rel="shortcut icon" href="/assets/img/profile/curry-shoot-1.jpg" /> <link rel="stylesheet" href="/css/main.css"> <link rel="canonical" href="http://zhaohangbo.me//2016/03/01/Leetcode-315.md.html"> <link rel="alternate" type="application/rss+xml" title="赵杭波的个人博客" href="http://zhaohangbo.me//pages/feed.xml" /> <script src="/assets/js/prefixfree.js"></script> </head> <body> <aside id="sidebar"> <div id="sidebar-left"> <a id="sidebar-avatar" href="/"> <img id="sidebar-avatar-img" alt="" src="/assets/img/profile/curry-shoot-1.jpg"/> </a> <div id="sidebar-social"> <a href="/pages/feed.xml" class="sidebar-social-icon feed"></a> <a href="mailto:zhaohangbo1991@gmail.com" class="sidebar-social-icon email"></a> <a href="https://twitter.com/zhaohangbo" class="sidebar-social-icon twitter" target="_blank"></a> <a href="https://github.com/zhaohangbo" class="sidebar-social-icon github" target="_blank"></a> </div> <ul id="sidebar-tags"> <li class="sidebar-tag active" data-filter="all">全部文章</li> <li class="sidebar-tag" data-filter="工具">工具</li> <li class="sidebar-tag" data-filter="读书">读书</li> <li class="sidebar-tag" data-filter="生活">生活</li> <li class="sidebar-tag" data-filter="追求">追求</li> <li class="sidebar-tag" data-filter="算法">算法</li> <li class="sidebar-tag" data-filter="创业">创业</li> <li class="sidebar-tag" data-filter="技术">技术</li> </ul> </div> <div id="sidebar-right"> <div id="search-box"> <input id="search-input" type="text" placeholder="Search" /> </div> <nav id="toc"> <a class="toc-link" data-tags="技术" href="/2016/03/05/snmp.html"> snmp </a> <a class="toc-link" data-tags="技术" href="/2016/03/04/collect-netflow-via-fluentd.html"> Collect Netflow Data via FluentD </a> <a class="toc-link" data-tags="追求" href="/2016/03/04/list-of-specific-goals-in-the-rest-time-of-cisco-internship.html"> 清单--2016年3月4月5月6月 </a> <a class="toc-link" data-tags="工具" href="/2016/03/03/vim-power.html"> Vim </a> <a class="toc-link" data-tags="技术" href="/2016/03/03/fluentd.html"> FluentD 学习使用开发 </a> <a class="toc-link" data-tags="生活" href="/2016/03/03/humor.html"> 幽默 </a> <a class="toc-link" data-tags="创业" href="/2016/03/02/find-expert.html"> 小团队找大专家 </a> <a class="toc-link" data-tags="算法" href="/2016/03/01/Leetcode-315.md.html"> Leetcode 315 </a> <a class="toc-link" data-tags="算法" href="/2016/03/01/Leetcode-315.html"> Leetcode 315 </a> <a class="toc-link" data-tags="生活" href="/2016/02/28/dead-poets-society.html"> Dead Poets Society </a> <a class="toc-link" data-tags="工具" href="/2016/02/27/markdown.html"> Markdown </a> <a class="toc-link" data-tags="技术" href="/2016/02/27/how-to-build-blog.html"> 如何搭建博客 </a> <a class="toc-link" data-tags="创业" href="/2016/02/27/logs-metrics-visualization-in-real-time.html"> Logs and Metrics Visualization Platform </a> <a class="toc-link" data-tags="生活" href="/2016/02/27/about-us-visa.html"> 美国签证(H1B,L1,J1,10-year) </a> <a class="toc-link" data-tags="追求" href="/2016/02/27/rule-of-life.html"> Rule of Life </a> <a class="toc-link" data-tags="追求" href="/2016/02/27/list-of-life.html"> List of Life </a> <a class="toc-link" data-tags="生活" href="/2015/12/11/the-importentance-of-writing.html"> 持续写作的重要性 </a> <a class="toc-link" data-tags="算法" href="/2015/09/07/sort-algorithms.html"> 七种常见经典排序算法总结（C++实现） </a> <a class="toc-link" data-tags="追求" href="/2015/04/13/rent-car-by-zipcar.html"> 使用 Zipcar 在加州租车 </a> <a class="toc-link" data-tags="生活" href="/2014/12/12/travel-of-california.html"> 美西加州三日游 </a> <a class="toc-link" data-tags="工具" href="/2014/08/03/general-mac-resources.html"> Mac 常用资源 </a> <a class="toc-link" data-tags="工具" href="/2014/04/10/vagrant.html"> Vagrant </a> <a class="toc-link" data-tags="工具" href="/2014/04/10/docker.html"> Docker </a> <a class="toc-link" data-tags="读书" href="/2014/03/14/book-list-of-2014.html"> 待读书单 </a> <a class="toc-link" data-tags="工具" href="/2014/01/15/general-shell-resources.html"> Shell 常用资源 </a> <a class="toc-link" data-tags="工具" href="/2014/01/15/general-python-resources.html"> Python 常用资源 </a> <a class="toc-link" data-tags="工具" href="/2014/01/15/general-javascript-resources.html"> JavaScript 常用资源 </a> <a class="toc-link" data-tags="工具" href="/2014/01/15/general-git-resources.html"> Git 常用资源 </a> <a class="toc-link" data-tags="工具" href="/2013/12/08/linux.html"> Linux </a> <a class="toc-link" data-tags="工具" href="/2013/08/06/how-to-learn.html"> How to Learn </a> <a class="toc-link" data-tags="工具" href="/2013/04/23/blog.html"> Blog </a> <a class="toc-link" data-tags="工具" href="/2013/03/25/sever-deployment.html"> Sever Deployment </a> <a class="toc-link" data-tags="工具" href="/2013/01/16/git.html"> Git </a> </nav> </div> </aside> <main id="main"> <article class="post container"> <div class="post-meta"> <span class="post-meta-span date">2016 March 01</span> <span class="post-meta-span tag">Leetcode, MergeSort, BST, Google</span> </div> <h1 class="post-title">Leetcode 315</h1> ## Letcode 315. Count of Smaller Numbers After Self ### Method 1 ---- Merge Sort left:[5,7,9]; right:[2,4,6,8] 9 8 7 6 5 4 2 - Merge the two sub arrays - Must be aware left[] and right[] are sorted already - So only when we choose a number from right[] - Can we increase the leftcount for the current index by 1 - And when we choose a number from left[], reset leftcount to 0. ### __Idea of Merge Sort__ - Do merge sort, instead of sort the number in nums, we sort the indexes of each number. - Example: nums = [5,2,6,1], indexes = [0,1,2,3] After sort: indexes = [3,1,0,2] - Do the merge part, be aware left[] and right[] are sorted already. - We keep a rightcount to record how many numbers from right[] we have added, whicn is the count of smaller right numbers - We keep an array count[] to record the rightcount result. - When we move a number from right[] into the new sorted array, we increase rightcount by 1. - When we move a number from left[] into the new sorted array, we increase count[ index of the number ] by rightcount. <figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">private</span> <span class="kt">int</span> <span class="o">[]</span> <span class="n">count</span><span class="o">;</span>
<span class="c1">//Merge Sort</span>
<span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">countSmaller</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">count</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
  <span class="kt">int</span><span class="o">[]</span> <span class="n">indexes</span> <span class="o">=</span><span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
  <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++)</span>
    <span class="n">indexes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">i</span><span class="o">;</span>
  <span class="n">mergeSort</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span><span class="n">nums</span><span class="o">,</span><span class="n">indexes</span><span class="o">);</span>

  <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list_count</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
  <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span> <span class="n">count</span><span class="o">.</span><span class="na">length</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
    <span class="n">list_count</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">count</span><span class="o">[</span><span class="n">i</span><span class="o">]);</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">list_count</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">void</span> <span class="nf">mergeSort</span><span class="p">(</span><span class="kt">int</span> <span class="n">start</span> <span class="o">,</span> <span class="kt">int</span> <span class="n">end</span> <span class="o">,</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">indexes</span><span class="o">){</span>
  <span class="k">if</span><span class="o">(</span><span class="n">start</span><span class="o">&lt;</span><span class="n">end</span><span class="o">){</span>
    <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="o">(</span><span class="n">start</span><span class="o">+</span><span class="n">end</span><span class="o">)/</span><span class="mi">2</span><span class="o">;</span>
    <span class="n">mergeSort</span><span class="o">(</span><span class="n">start</span><span class="o">,</span><span class="n">mid</span><span class="o">,</span><span class="n">nums</span><span class="o">,</span><span class="n">indexes</span><span class="o">);</span>
    <span class="n">mergeSort</span><span class="o">(</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">,</span><span class="n">end</span><span class="o">,</span><span class="n">nums</span><span class="o">,</span><span class="n">indexes</span><span class="o">);</span>
    <span class="n">merge</span><span class="o">(</span><span class="n">start</span><span class="o">,</span><span class="n">mid</span><span class="o">,</span><span class="n">end</span><span class="o">,</span><span class="n">nums</span><span class="o">,</span><span class="n">indexes</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kt">void</span> <span class="nf">merge</span><span class="p">(</span><span class="kt">int</span> <span class="n">start</span><span class="o">,</span><span class="kt">int</span> <span class="n">mid</span><span class="o">,</span> <span class="kt">int</span> <span class="n">end</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">,</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">indexes</span> <span class="o">){</span>
    <span class="kt">int</span> <span class="n">left_index</span> <span class="o">=</span> <span class="n">start</span><span class="o">,</span> <span class="n">right_index</span> <span class="o">=</span> <span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
    <span class="kt">int</span> <span class="n">right_smaller_count</span> <span class="o">=</span> <span class="mi">0</span> <span class="o">,</span> <span class="n">sort_index</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kt">int</span><span class="o">[]</span> <span class="n">new_indexes</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="n">end</span> <span class="o">-</span> <span class="n">start</span> <span class="o">+</span> <span class="mi">1</span><span class="o">];</span>

    <span class="k">while</span><span class="o">(</span><span class="n">left_index</span><span class="o">&lt;=</span><span class="n">mid</span> <span class="o">&amp;&amp;</span> <span class="n">right_index</span><span class="o">&lt;=</span><span class="n">end</span><span class="o">){</span>
<span class="c1">//left &gt; right, so we'll put the right in to new_indexes</span>
<span class="c1">//we compare the value of nums[], but we move and sort the index of it</span>
      <span class="k">if</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">indexes</span><span class="o">[</span><span class="n">left_index</span><span class="o">]]&gt;</span><span class="n">nums</span><span class="o">[</span><span class="n">indexes</span><span class="o">[</span><span class="n">right_index</span><span class="o">]]){</span>
        <span class="n">new_indexes</span><span class="o">[</span><span class="n">sort_index</span><span class="o">]</span> <span class="o">=</span> <span class="n">indexes</span><span class="o">[</span><span class="n">right_index</span><span class="o">];</span>
        <span class="n">right_smaller_count</span><span class="o">++;</span>
        <span class="n">right_index</span><span class="o">++;</span>
      <span class="o">}</span>
      <span class="k">else</span><span class="o">{</span>
<span class="c1">//Both the left[] and right[] are already sorted</span>
<span class="c1">//It's impossible the index in count[index] will be bigger(&gt;) than mid,</span>
<span class="c1">//in another word, index in count[index] is limited to the left half.</span>
        <span class="n">new_indexes</span><span class="o">[</span><span class="n">sort_index</span><span class="o">]</span> <span class="o">=</span> <span class="n">indexes</span><span class="o">[</span><span class="n">left_index</span><span class="o">];</span>
        <span class="n">count</span><span class="o">[</span><span class="n">indexes</span><span class="o">[</span><span class="n">left_index</span><span class="o">]]+=</span><span class="n">right_smaller_count</span><span class="o">;</span>
        <span class="n">left_index</span><span class="o">++;</span>
      <span class="o">}</span>
      <span class="n">sort_index</span><span class="o">++;</span>
    <span class="o">}</span>
    <span class="k">while</span><span class="o">(</span><span class="n">left_index</span><span class="o">&lt;=</span><span class="n">mid</span><span class="o">){</span>
<span class="c1">//left_index is index of Sorted Array</span>
<span class="c1">//but count[] is recording the smaller count of the Unsorted Array</span>
<span class="c1">//indexes[left_index] Maps the sorted array index to the unsorted array index</span>
      <span class="n">new_indexes</span><span class="o">[</span><span class="n">sort_index</span><span class="o">]=</span> <span class="n">indexes</span><span class="o">[</span><span class="n">left_index</span><span class="o">];</span>
      <span class="n">count</span><span class="o">[</span><span class="n">indexes</span><span class="o">[</span><span class="n">left_index</span><span class="o">]]+=</span><span class="n">right_smaller_count</span><span class="o">;</span>
      <span class="n">left_index</span><span class="o">++;</span>
      <span class="n">sort_index</span><span class="o">++;</span>
    <span class="o">}</span>
    <span class="k">while</span><span class="o">(</span><span class="n">right_index</span><span class="o">&lt;=</span><span class="n">end</span><span class="o">){</span>
      <span class="n">new_indexes</span><span class="o">[</span><span class="n">sort_index</span><span class="o">]=</span> <span class="n">indexes</span><span class="o">[</span><span class="n">right_index</span><span class="o">];</span>
      <span class="n">right_index</span><span class="o">++;</span>
      <span class="n">sort_index</span><span class="o">++;</span>
    <span class="o">}</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span><span class="n">start</span> <span class="o">;</span><span class="n">i</span><span class="o">&lt;=</span> <span class="n">end</span><span class="o">;</span><span class="n">i</span><span class="o">++){</span>
      <span class="n">indexes</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">new_indexes</span><span class="o">[</span><span class="n">i</span><span class="o">-</span><span class="n">start</span><span class="o">];</span><span class="c1">//i - start</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure> ### Method 2 ---- Binary Search Tree - Idea <figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">countSmaller_BST</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Integer</span><span class="o">[]</span> <span class="n">smallerCountsArr</span> <span class="o">=</span><span class="k">new</span> <span class="n">Integer</span><span class="o">[</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">];</span>
    <span class="n">Node</span> <span class="n">root</span> <span class="o">=</span><span class="kc">null</span><span class="o">;</span>
<span class="c1">//why from the right to left, because in this way</span>
<span class="c1">//every time you insert, the status of all elements on right will be updated</span>
    <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span> <span class="o">;</span><span class="n">i</span><span class="o">&gt;=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">--){</span>
      <span class="n">root</span> <span class="o">=</span> <span class="n">insert</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">i</span><span class="o">],</span> <span class="n">root</span><span class="o">,</span> <span class="n">smallerCountsArr</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="mi">0</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">return</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">smallerCountsArr</span><span class="o">);</span>
  <span class="o">}</span>

<span class="kd">public</span> <span class="n">Node</span> <span class="nf">insert</span><span class="p">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">,</span><span class="n">Node</span> <span class="n">node</span><span class="o">,</span><span class="n">Integer</span><span class="o">[]</span> <span class="n">smallerCountsArr</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i</span><span class="o">,</span> <span class="kt">int</span> <span class="n">prevSmallerCount</span><span class="o">){</span>
  <span class="k">if</span><span class="o">(</span><span class="n">node</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
    <span class="n">smallerCountsArr</span><span class="o">[</span><span class="n">i</span><span class="o">]=</span> <span class="n">prevSmallerCount</span><span class="o">;</span><span class="c1">//default dup = 1</span>
    <span class="n">node</span> <span class="o">=</span>  <span class="k">new</span> <span class="n">Node</span><span class="o">(</span><span class="n">val</span><span class="o">,</span><span class="mi">0</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span> <span class="o">==</span> <span class="n">val</span><span class="o">){</span>
    <span class="n">node</span><span class="o">.</span><span class="na">dup</span> <span class="o">++</span> <span class="o">;</span>
    <span class="n">smallerCountsArr</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="n">node</span><span class="o">.</span><span class="na">smallerCount</span> <span class="o">+</span> <span class="n">prevSmallerCount</span><span class="o">;</span>
  <span class="o">}</span>
  <span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">node</span><span class="o">.</span><span class="na">val</span> <span class="o">&gt;</span> <span class="n">val</span> <span class="o">){</span>
<span class="c1">//smallerCountsArr[i] = node.smallerCount + prevSmallerCount;</span>
    <span class="n">node</span><span class="o">.</span><span class="na">smallerCount</span><span class="o">++;</span>
    <span class="n">node</span><span class="o">.</span><span class="na">left</span> <span class="o">=</span> <span class="n">insert</span><span class="o">(</span><span class="n">val</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="na">left</span><span class="o">,</span> <span class="n">smallerCountsArr</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">prevSmallerCount</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="k">else</span> <span class="o">{</span><span class="c1">//(node.val &lt; val)</span>
    <span class="n">node</span><span class="o">.</span><span class="na">right</span> <span class="o">=</span> <span class="n">insert</span><span class="o">(</span><span class="n">val</span><span class="o">,</span> <span class="n">node</span><span class="o">.</span><span class="na">right</span><span class="o">,</span> <span class="n">smallerCountsArr</span><span class="o">,</span> <span class="n">i</span><span class="o">,</span> <span class="n">prevSmallerCount</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="na">dup</span> <span class="o">+</span> <span class="n">node</span><span class="o">.</span><span class="na">smallerCount</span><span class="o">);</span>
  <span class="o">}</span>
  <span class="k">return</span> <span class="n">node</span><span class="o">;</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">Node</span> <span class="o">{</span>
  <span class="n">Node</span> <span class="n">left</span><span class="o">,</span><span class="n">right</span><span class="o">;</span>
  <span class="kt">int</span> <span class="n">val</span><span class="o">,</span> <span class="n">smallerCount</span> <span class="o">;</span>
  <span class="kt">int</span> <span class="n">dup</span> <span class="o">=</span><span class="mi">1</span> <span class="o">;</span>
  <span class="kd">public</span> <span class="n">Node</span><span class="o">(</span><span class="kt">int</span> <span class="n">val</span><span class="o">,</span> <span class="kt">int</span> <span class="n">smallerCount</span><span class="o">){</span>
    <span class="k">this</span><span class="o">.</span><span class="na">val</span> <span class="o">=</span><span class="n">val</span> <span class="o">;</span>
    <span class="k">this</span><span class="o">.</span><span class="na">smallerCount</span><span class="o">=</span><span class="n">smallerCount</span> <span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure> </article> <div class="post-share"> <div class="container"> <a href="https://twitter.com/share?url=http://zhaohangbo.me//2016/03/01/Leetcode-315.md.html&text=Leetcode 315" target="_blank" class="post-share-icon twitter"></a> <a href="https://www.evernote.com/clip.action?url=http://zhaohangbo.me//2016/03/01/Leetcode-315.md.html&title=Leetcode 315" target="_blank" class="post-share-icon evernote"></a> <a href="http://service.weibo.com/share/share.php?url=http://zhaohangbo.me//2016/03/01/Leetcode-315.md.html&title=Leetcode 315" target="_blank" class="post-share-icon weibo"></a> </div> </div> <div class="comment container"> <div id="disqus_thread"> <a href=""></a> </div> </div> <div class="footer"> <div class="container"> <p class="footer-entry">All content is licensed under <a href="http://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">CC BY-NC-SA</a></p> <p class="footer-entry">Buit with <a href="http://jekyllrb.com/" target="_blank">Jekyll</a> and <a href="https://github.com/P233/3-Jekyll" target="_blank">3-Jekyll theme</a> • Hosted on <a href="https://pages.github.com/" target="_blank">Github</a></p> </div> </div> </main> <button id="menu"> <span id="menu-icons"></span> </button> <script src="/assets/js/jquery-2.1.3.min.js"></script> <script src="/assets/js/jquery.pjax.js"></script> <script src="/assets/js/nprogress.js"></script> <script src="/assets/js/main.js"></script> <script> (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','//www.google-analytics.com/analytics.js','ga'); ga('create', 'UA-54767140-1', 'zhaohangbo.me'); ga('send', 'pageview'); </script> </body> </html>
