<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>赵杭波的博客</title>
    <link>http://zhaohangbo.me</link>
    <description>赵杭波的博客</description>
    
      <item>
        <title>持续写作的重要性</title>
        <link>http://zhaohangbo.me/2016/02/28/the-importentance-of-writing.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2016/02/28/the-importentance-of-writing.html</guid>
        <pubDate>Sun, 28 Feb 2016 00:00:00 -0800</pubDate>
        <description>&lt;p&gt;最近都没有怎么上微博，昨天上去看到这样一句话，让我挺有感触&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7u2ho6.com1.z0.glb.clouddn.com/life-programmer-writing.png&quot; alt=&quot;写作的重要性&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我自己写的东西大部分都是一些遇到问题记录和总结，很少能有一些“创造性”的东西。&lt;/p&gt;

&lt;p&gt;记得Fenng在一篇文章里讲到现在的社交网站中，98%的人在消费信息，只有2%的人在产生信息。&lt;/p&gt;

&lt;p&gt;我一直属于这98%的人，没有办法，在大学之前从来没有觉得写作的重要性，写出来的东西也是为了完成作文800字的限制。现在想象一下，感觉自己真是太文盲了，自己能写的好像也只有议论文了。提一个议论点，然后摆一些论据，最后总结一下，800字搞定收工。甚至在写一些个人技术学习总结的时候都没有很好的利用好议论文方法，仅仅是一个流水陈述，想到哪里写到哪里。&lt;/p&gt;

&lt;p&gt;曾经也想过提高一下个人写作水平，想过的一个方式是翻译外文，把今天的hacker news上或者techmeme上感兴趣的一篇文章翻译下来。尝试过一次太受打击，就放弃了。虽然看这些文章基本上没有什么问题，但是要翻译的时候就英语水平捉急了，翻译一篇可能要耗费好多小时的时间。以前翻译过一篇&lt;a href=&quot;/2012/11/08/openstack-nova-internal.html&quot;&gt;OpenStack Nova内部机制的文章&lt;/a&gt;，因为没有找到译文，自己又比较需要这方面的信息，所以尝试了一下，结果发现就这样一个自己比较了解的东西，都翻译的惨不忍睹。&lt;/p&gt;

&lt;p&gt;现在每天除了学习英语，其余时间最多的就是看看微信上的公众帐号，小道消息、道哥黑板报、Mac Talk都是我比较喜欢的公众帐号。虽然我没有他们那样深的积累和话题，或许我能从个人理解上写一些容易上手的话题。&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>Dead Poets Society</title>
        <link>http://zhaohangbo.me/2016/02/28/dead-poets-society.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2016/02/28/dead-poets-society.html</guid>
        <pubDate>Sun, 28 Feb 2016 00:00:00 -0800</pubDate>
        <description>&lt;p&gt;死亡诗社中的很对，诗句和对白，挺有意思的，希望能整理出来，并背下来。&lt;/p&gt;

&lt;p&gt;Two roads diverged in a yellow wood, And sorry I could not travel both.&lt;/p&gt;

&lt;p&gt;Two roads diverged in a wood, and I, I took the one less traveled by, And that has made all the dif    ference.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Markdown</title>
        <link>http://zhaohangbo.me/2016/02/27/markdown.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2016/02/27/markdown.html</guid>
        <pubDate>Sat, 27 Feb 2016 00:00:00 -0800</pubDate>
        <description>&lt;p&gt;To be or not to be, that is the question.  &lt;br /&gt;
To code or to date, that is the most tough question.  &lt;br /&gt;
Here is how to use markdown(.md) based on this question.&lt;/p&gt;

&lt;h2 id=&quot;headings&quot;&gt;Headings&lt;/h2&gt;
&lt;p&gt;To create a heading, add one to six &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; symbols before your heading text. The number of &lt;code class=&quot;highlighter-rouge&quot;&gt;#&lt;/code&gt; you use will determine the size of the heading.&lt;/p&gt;

&lt;h1 id=&quot;the-largest-heading&quot;&gt;The largest heading&lt;/h1&gt;

&lt;h2 id=&quot;the-second-largest-heading&quot;&gt;The second largest heading&lt;/h2&gt;

&lt;h6 id=&quot;the-smallest-heading&quot;&gt;The smallest heading&lt;/h6&gt;

&lt;h2 id=&quot;bold&quot;&gt;Bold&lt;/h2&gt;
&lt;p&gt;You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;**text**&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;__text__&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;To code or to date ?&lt;/strong&gt; &lt;strong&gt;That is the question.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;italic&quot;&gt;Italic&lt;/h2&gt;

&lt;p&gt;You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;*text*&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;_text_&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;To code or to date ?&lt;/em&gt; &lt;em&gt;That is the question.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;strikethrough&quot;&gt;Strikethrough&lt;/h2&gt;

&lt;p&gt;You can use &lt;code class=&quot;highlighter-rouge&quot;&gt;~~text~~&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;~~To code or to date ?~~   It seems to not be working here in this blog.&lt;/p&gt;

&lt;h2 id=&quot;quoting-text&quot;&gt;Quoting text&lt;/h2&gt;

&lt;p&gt;You can quote text with a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;gt; your quote text&lt;/code&gt;.&lt;br /&gt;
In the words of Abraham Lincoln:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Pardon my French&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;quoting-code&quot;&gt;Quoting code&lt;/h2&gt;

&lt;p&gt;You can call out code or a command within a sentence &lt;code class=&quot;highlighter-rouge&quot;&gt;with single backticks&lt;/code&gt;, like&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
`code or command`
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Some basic Git commands are:
&lt;code class=&quot;highlighter-rouge&quot;&gt;
git status
git add
git commit
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;lists&quot;&gt;Lists&lt;/h2&gt;

&lt;p&gt;You can make a list by preceding one or more lines of text with &lt;code class=&quot;highlighter-rouge&quot;&gt;-&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;George Washington&lt;/li&gt;
  &lt;li&gt;Abraham lincoln&lt;/li&gt;
  &lt;li&gt;Benjamin Franklin&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can create nested lists by indenting lines by 4 spaces.&lt;/p&gt;

&lt;p&gt;Do not forget the &lt;code class=&quot;highlighter-rouge&quot;&gt;space&lt;/code&gt; between &lt;code class=&quot;highlighter-rouge&quot;&gt;*&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Make my changes
    &lt;ol&gt;
      &lt;li&gt;Fix bug&lt;/li&gt;
      &lt;li&gt;Improve formatting
        &lt;ul&gt;
          &lt;li&gt;Make the headings bigger&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;Push my commits to GitHub&lt;/li&gt;
  &lt;li&gt;Open a pull request
    &lt;ul&gt;
      &lt;li&gt;Describe my changes&lt;/li&gt;
      &lt;li&gt;Mention all the members of my team
        &lt;ul&gt;
          &lt;li&gt;Ask for feedback
            &lt;ul&gt;
              &lt;li&gt;Test1&lt;/li&gt;
              &lt;li&gt;Test2&lt;/li&gt;
              &lt;li&gt;Test3&lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;interesting-task-lists&quot;&gt;Interesting Task Lists&lt;/h2&gt;

&lt;p&gt;You can create task lists by prefacing list items with &lt;code class=&quot;highlighter-rouge&quot;&gt;[ ]&lt;/code&gt;. To mark a task as complete, use &lt;code class=&quot;highlighter-rouge&quot;&gt;[x]&lt;/code&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;[x] Finish my changes&lt;/li&gt;
  &lt;li&gt;[ ] Push my commits to GitHub&lt;/li&gt;
  &lt;li&gt;[ ] Open a pull request
This seems to not be working.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ignoring-markdown-formatting&quot;&gt;Ignoring Markdown formatting&lt;/h2&gt;

&lt;p&gt;Tell GitHub to ignore Markdown formatting by using &lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt; before the Markdown character.&lt;/p&gt;

&lt;p&gt;Let’s rename *&lt;em&gt;our-new-project*&lt;/em&gt; to *our-old-project*.
It seems to be not working here.&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>如何搭建博客</title>
        <link>http://zhaohangbo.me/2016/02/27/how-to-build-blog.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2016/02/27/how-to-build-blog.html</guid>
        <pubDate>Sat, 27 Feb 2016 00:00:00 -0800</pubDate>
        <description>&lt;p&gt;博客框架 &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; ，部署在 &lt;a href=&quot;https://pages.github.com&quot;&gt;Github&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;主题参考 &lt;a href=&quot;https://github.com/P233/3-Jekyll&quot;&gt;3-Jekyll&lt;/a&gt; ，感谢 &lt;a href=&quot;https://github.com/P233&quot;&gt;Peiwen Lu&lt;/a&gt; 。&lt;/p&gt;

&lt;p&gt;模板参考 &lt;a href=&quot;http://yansu.org/&quot;&gt;yansu&lt;/a&gt;的风格，感谢&lt;a href=&quot;https://github.com/suyan/suyan.github.io&quot;&gt;yansu&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;我博客的源码托管在&lt;a href=&quot;https://github.com/zhaohangbo/zhaohangbo.github.io.git&quot;&gt;Github&lt;/a&gt;上，欢迎建议，欢迎交流。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Logs and Metrics Visualization Platform</title>
        <link>http://zhaohangbo.me/2016/02/27/logs-metrics-visualization-in-real-time.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2016/02/27/logs-metrics-visualization-in-real-time.html</guid>
        <pubDate>Sat, 27 Feb 2016 00:00:00 -0800</pubDate>
        <description>&lt;h2 id=&quot;general-saas&quot;&gt;General SaaS&lt;/h2&gt;
&lt;p&gt;An Operational Intelligence SaaS like Zeus&lt;/p&gt;

&lt;h2 id=&quot;erp-on-company-private-cloud&quot;&gt;ERP on Company Private Cloud&lt;/h2&gt;
&lt;p&gt;Enterprise resource planning (ERP) is business process management software&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;企业生产流水线监控&lt;/li&gt;
  &lt;li&gt;企业考勤监控&lt;/li&gt;
  &lt;li&gt;学校考情监控&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;section&quot;&gt;配套智能硬件—-多传感器的集合&lt;/h2&gt;
&lt;p&gt;自动产生并发送Metrics和Logs，不需要开发者使用SDK或者API。
可以根据不同业务，灵活地组合。
例子，比如4个设备，放在农夫山泉的生产流水线上，便能监控整条流水线的生产指标，并且可视化。&lt;/p&gt;

&lt;h1 id=&quot;use-cases&quot;&gt;Use Cases&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;Pipeline Monitoring(But current pipline monitoring systems are already quite mature)&lt;/li&gt;
  &lt;li&gt;电气设备监控&lt;/li&gt;
  &lt;li&gt;交通，安检，体检。&lt;/li&gt;
&lt;/ol&gt;
</description>
      </item>
    
      <item>
        <title>美国签证(H1B,L1,J1,10-year)</title>
        <link>http://zhaohangbo.me/2016/02/27/about-us-visa.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2016/02/27/about-us-visa.html</guid>
        <pubDate>Sat, 27 Feb 2016 00:00:00 -0800</pubDate>
        <description>&lt;p&gt;了解各类美国签证。
以便于更自由地来美国，或是学习，或是工作，或是旅游。&lt;/p&gt;

&lt;p&gt;因为在硅谷这一年，看到不少国内企业家，投资人，创业者，海龟，频繁地往返于中美两地之间，参加交流活动。&lt;/p&gt;

&lt;p&gt;我希望自己以后也能有这样的自由，所以有必要了解下各类美国签证。&lt;/p&gt;

&lt;p&gt;H1B(工作签证)&lt;/p&gt;

&lt;p&gt;EB1B(学术要求，论文，期刊)
EB1C
EB2&lt;/p&gt;

&lt;p&gt;L1A
L1B(Company Internal Transfer)&lt;/p&gt;

&lt;p&gt;O1
O2&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Rule of Life</title>
        <link>http://zhaohangbo.me/2016/02/27/rule-of-life.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2016/02/27/rule-of-life.html</guid>
        <pubDate>Sat, 27 Feb 2016 00:00:00 -0800</pubDate>
        <description>&lt;p&gt;我们或许做了很多规划，努力学习，考目标的好大学，找目标的好工作，可是生活和世事，并不总按照你的规划走，不管你有多聪明，多努力。&lt;/p&gt;

&lt;p&gt;诸葛亮，千算万算，还是没有实现自己一生设定的目标。
但他一生的报答知遇之恩原则是不变的。假如时光倒逝，孔明再活一次，他应该还是会再一次尝试伐魏，哪怕明知会再同样失败一回。
有了他自己一生的原则，那么剩下的就是如他的对手司马懿所说的“尽人事，顺天命”了。
而要有这般“尽人事，顺天命”的豁达，需要树立自己人生之原则。&lt;/p&gt;

&lt;p&gt;所以，
计划总是不能百分百如愿的。因为万物相互影响，万变之中，怎么可能按照着一个固定的计划去走？
可是树立自己人生的原则，却能让人不变应对万变。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;先闲的人生原则&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;王阳明，儒家，要做圣人。&lt;/li&gt;
  &lt;li&gt;曾国藩，立言立德立行。&lt;/li&gt;
  &lt;li&gt;Steve Jobs, Think Differently, crazy enough to change the world.&lt;/li&gt;
  &lt;li&gt;老子，孔子&lt;/li&gt;
  &lt;li&gt;林肯，本杰明富兰克林&lt;/li&gt;
  &lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      </item>
    
      <item>
        <title>List of Life</title>
        <link>http://zhaohangbo.me/2016/02/27/list-of-life.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2016/02/27/list-of-life.html</guid>
        <pubDate>Sat, 27 Feb 2016 00:00:00 -0800</pubDate>
        <description>&lt;p&gt;很多问题，永远想不明白。但不要停止去追寻答案。&lt;/p&gt;

&lt;p&gt;作为一个个体，不如做勇者，做勇士。知其不可而为之。&lt;/p&gt;

&lt;p&gt;Two roads diverged in a wood, and I, I took the one less traveled by, And that has made all the difference.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;人生清单—-我想要实现的事情&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;带父母去三亚度假，2016-2017春节
    &lt;ul&gt;
      &lt;li&gt;我的父母是没有周末的，每天过年能休息5天，他们打拼了十几年，始终如一的勤劳，善良乐观，也是勇敢能吃苦的创业者。&lt;/li&gt;
      &lt;li&gt;我的妈妈，简称老板娘。是家庭经济的支柱，作为一个女人，她从没有享受过普通女人的相夫教子的舒适和保养打扮的乐趣，从工作到家庭，没有一个角落能让她体味普通女人的柔弱。有得有失，她收获了投身事业的精彩。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;找一个开朗阳光的女孩，善良朴实，健康乐观爱运动，跟我志趣相投。最好还能帮我管钱。我肯定让她幸福。&lt;/li&gt;
  &lt;li&gt;我的家庭。
    &lt;ul&gt;
      &lt;li&gt;一个儿子，一个女儿，起码的吧^_^&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;一名卓越的工程师。
    &lt;ul&gt;
      &lt;li&gt;能主动去找问题，能发现有价值的问题。 眼光战略。&lt;/li&gt;
      &lt;li&gt;能自己敲代码解决实现，熟练掌握技术能力。技术能力。&lt;/li&gt;
      &lt;li&gt;能组织、鼓动人一起去解决实现。管理能力。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;至少一个有影响力的产品、项目或者开源软件。&lt;/li&gt;
  &lt;li&gt;企业家。上市公司。&lt;/li&gt;
  &lt;li&gt;促进中国教育改革。&lt;/li&gt;
  &lt;li&gt;篮球队的队员，能时而打比赛。&lt;/li&gt;
  &lt;li&gt;888块腹肌。健康，健身，练肌肉，练柔韧。身材榜样（库里、李小龙），指标（单手俯卧撑，摸篮筐）&lt;/li&gt;
  &lt;li&gt;睡眠。了解睡眠，学习睡眠，提高睡眠质量。&lt;/li&gt;
  &lt;li&gt;合唱队的成员，能时而参加比赛或演出。&lt;/li&gt;
  &lt;li&gt;创作自己的音乐，至少写一首歌。&lt;/li&gt;
&lt;/ol&gt;

</description>
      </item>
    
      <item>
        <title>Vim 常用资源</title>
        <link>http://zhaohangbo.me/2015/10/04/general-vim-resources.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2015/10/04/general-vim-resources.html</guid>
        <pubDate>Sun, 04 Oct 2015 00:00:00 -0700</pubDate>
        <description>&lt;h2 id=&quot;section&quot;&gt;在粘贴代码时不启动自动缩进&lt;/h2&gt;

&lt;p&gt;粘贴之前输入 &lt;code class=&quot;highlighter-rouge&quot;&gt;:set paste&lt;/code&gt;
粘贴完后恢复 &lt;code class=&quot;highlighter-rouge&quot;&gt;:set nopaste&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;关闭和开启行号&lt;/h2&gt;

&lt;p&gt;关闭 &lt;code class=&quot;highlighter-rouge&quot;&gt;:set nonu&lt;/code&gt;
开启 &lt;code class=&quot;highlighter-rouge&quot;&gt;:set number&lt;/code&gt;&lt;/p&gt;

</description>
      </item>
    
      <item>
        <title>七种常见经典排序算法总结（C++实现）</title>
        <link>http://zhaohangbo.me/2015/09/07/sort-algorithms.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2015/09/07/sort-algorithms.html</guid>
        <pubDate>Mon, 07 Sep 2015 00:00:00 -0700</pubDate>
        <description>&lt;p&gt;排序算法是非常常见也非常基础的算法，以至于大部分情况下它们都被集成到了语言的辅助库中。排序算法虽然已经可以很方便的使用，但是理解排序算法可以帮助我们找到解题的方向。&lt;/p&gt;

&lt;h2 id=&quot;bubble-sort&quot;&gt;1. 冒泡排序 (Bubble Sort)&lt;/h2&gt;

&lt;p&gt;冒泡排序是最简单粗暴的排序方法之一。它的原理很简单，每次从左到右两两比较，把大的交换到后面，每次可以确保将前M个元素的最大值移动到最右边。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;从左开始比较相邻的两个元素x和y，如果 x &amp;gt; y 就交换两者&lt;/li&gt;
  &lt;li&gt;执行比较和交换，直到到达数组的最后一个元素&lt;/li&gt;
  &lt;li&gt;重复执行1和2，直到执行n次，也就是n个最大元素都排到了最后&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CPP
void bubble_sort(vector&amp;lt;int&amp;gt; &amp;amp;nums)
{
    for (int i = 0; i &amp;lt; nums.size() - 1; i++) { // times
        for (int j = 0; j &amp;lt; nums.size() - i - 1; j++) { // position
            if (nums[j] &amp;gt; nums[j + 1]) {
                int temp = nums[j];
                nums[j] = nums[j + 1];
                nums[j + 1] = temp;
            }
        }
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;交换的那一步可以不借助temp，方法是&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CPP
nums[j] += nums[j + 1];
nums[j + 1] = num[j] - nums[j + 1];
nums[j] -= num[j + 1];
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;复杂度分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于我们要重复执行n次冒泡，每次冒泡要执行n次比较（实际是1到n的等差数列，也就是&lt;code class=&quot;highlighter-rouge&quot;&gt;(a1 + an) * n / 2&lt;/code&gt;），也就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;O(n^2)&lt;/code&gt;。 空间复杂度是&lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;insertion-sort&quot;&gt;2. 插入排序（Insertion Sort）&lt;/h2&gt;

&lt;p&gt;插入排序的原理是从左到右，把选出的一个数和前面的数进行比较，找到最适合它的位置放入，使前面部分有序。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;从左开始，选出当前位置的数x，和它之前的数y比较，如果x &amp;lt; y则交换两者&lt;/li&gt;
  &lt;li&gt;对x之前的数都执行1步骤，直到前面的数字都有序&lt;/li&gt;
  &lt;li&gt;选择有序部分后一个数字，插入到前面有序部分，直到没有数字可选择&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CPP
void insert_sort(vector&amp;lt;int&amp;gt; &amp;amp;nums)
{
    for (int i = 1; i &amp;lt; nums.size(); i++) { // position
        for (int j = i; j &amp;gt; 0; j--) {
            if (nums[j] &amp;lt; nums[j - 1]) {
                int temp = nums[j];
                nums[j] = nums[j - 1];
                nums[j - 1] = temp;
            }
        }
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;复杂度分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;因为要选择n次，而且插入时最坏要比较n次，所以时间复杂度同样是&lt;code class=&quot;highlighter-rouge&quot;&gt;O(n^2)&lt;/code&gt;。空间复杂度是&lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;selection-sort&quot;&gt;3. 选择排序（Selection Sort）&lt;/h2&gt;

&lt;p&gt;选择排序的原理是，每次都从乱序数组中找到最大（最小）值，放到当前乱序数组头部，最终使数组有序。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;从左开始，选择后面元素中最小值，和最左元素交换&lt;/li&gt;
  &lt;li&gt;从当前已交换位置往后执行，直到最后一个元素&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;```CPP
void selection_sort(vector&lt;int&gt; &amp;amp;nums)
{
    for (int i = 0; i &amp;lt; nums.size(); i++) { // position
        int min = i;
        for (int j = i + 1; j &amp;lt; nums.size(); j++) {
            if (nums[j] &amp;lt; nums[min]) {
                min = j;
            }
        }&lt;/int&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    int temp = nums[i];
    nums[i] = nums[min];
    nums[min] = temp;
} } ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;复杂度分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;每次要找一遍最小值，最坏情况下找n次，这样的过程要执行n次，所以时间复杂度还是&lt;code class=&quot;highlighter-rouge&quot;&gt;O(n^2)&lt;/code&gt;。空间复杂度是&lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;shell-sort&quot;&gt;4. 希尔排序（Shell Sort）&lt;/h2&gt;

&lt;p&gt;希尔排序从名字上看不出来特点，因为它是以发明者命名的。它的另一个名字是“递减增量排序算法“。这个算法可以看作是插入排序的优化版，因为插入排序需要一位一位比较，然后放置到正确位置。为了提升比较的跨度，希尔排序将数组按照一定步长分成几个子数组进行排序，通过逐渐减短步长来完成最终排序。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;例子&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;例如 &lt;code class=&quot;highlighter-rouge&quot;&gt;[10, 80, 70, 100, 90, 30, 20]&lt;/code&gt;
如果我们按照一次减一半的步长来算， 这个数组第一次排序时以3为步长，子数组是：&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;10 80 70&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;90 30 20&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这里其实按照列划分的4个子数组，排序后结果为&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;10 30 20&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;90 80 70&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;也就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;[10, 30 20 90 80 70 100]&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;然后再以1为步长生成子数组&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;10&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;30&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;20&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;..&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;这个时候就是一纵列了，也就是说最后一定是以一个数组来排序的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;计算当前步长，按步长划分子数组&lt;/li&gt;
  &lt;li&gt;子数组内插入排序&lt;/li&gt;
  &lt;li&gt;步长除以2后继续12两步，直到步长最后变成1&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;```CPP
void shell_sort(vector&lt;int&gt; &amp;amp;nums)
{
    for (int gap = nums.size() &amp;gt;&amp;gt; 1; gap &amp;gt; 0; gap &amp;gt;&amp;gt;= 1) { // times
        for (int i = gap; i &amp;lt; nums.size(); i++) { // position
            int temp = nums[i];&lt;/int&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;        int j = i - gap;
        for (; j &amp;gt;= 0 &amp;amp;&amp;amp; nums[j] &amp;gt; temp; j -= gap) {
            nums[j + gap] = nums[j];
        }

        nums[j + gap] = temp;
    }
} } ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;复杂度分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;希尔排序的时间复杂度受步长的影响，具体分析在&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F#.E6.AD.A5.E9.95.BF.E5.BA.8F.E5.88.97&quot;&gt;维基百科&lt;/a&gt;。&lt;/p&gt;

&lt;h2 id=&quot;merge-sort&quot;&gt;5. 归并排序（Merge Sort）&lt;/h2&gt;

&lt;p&gt;归并排序是采用分治法（Divide and Conquer）的一个典型例子。这个排序的特点是把一个数组打散成小数组，然后再把小数组拼凑再排序，直到最终数组有序。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;把当前数组分化成n个单位为1的子数组，然后两两比较合并成单位为2的n/2个子数组&lt;/li&gt;
  &lt;li&gt;继续进行这个过程，按照2的倍数进行子数组的比较合并，直到最终数组有序&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;```CPP
void merge_array(vector&lt;int&gt; &amp;amp;nums, int b, int m, int e, vector&lt;int&gt; &amp;amp;temp)
{
    int lb = b, rb = m, tb = b;
    while (lb != m &amp;amp;&amp;amp; rb != e)
        if (nums[lb] &amp;lt; nums[rb])
            temp[tb++] = nums[lb++];
        else
            temp[tb++] = nums[rb++];&lt;/int&gt;&lt;/int&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;while (lb &amp;lt; m)
    temp[tb++] = nums[lb++];

while (rb &amp;lt; e)
    temp[tb++] = nums[rb++];

for (int i = b;i &amp;lt; e; i++)
    nums[i] = temp[i]; }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;void merge_sort(vector&lt;int&gt; &amp;amp;nums, int b, int e, vector&lt;int&gt; &amp;amp;temp)
{
    int m = (b + e) / 2;
    if (m != b) {
        merge_sort(nums, b, m, temp);
        merge_sort(nums, m, e, temp);
        merge_array(nums, b, m, e, temp);
    }
}
```&lt;/int&gt;&lt;/int&gt;&lt;/p&gt;

&lt;p&gt;这个实现中加了一个temp，是和原数组一样大的一个空间，用来临时存放排序后的子数组的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;复杂度分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;highlighter-rouge&quot;&gt;merge_array&lt;/code&gt;过程中，实际的操作是当前两个子数组的长度，即2m。又因为打散数组是二分的，最终循环执行数是&lt;code class=&quot;highlighter-rouge&quot;&gt;logn&lt;/code&gt;。所以这个算法最终时间复杂度是&lt;code class=&quot;highlighter-rouge&quot;&gt;O(nlogn)&lt;/code&gt;，空间复杂度是&lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;quick-sort&quot;&gt;6. 快速排序（Quick Sort）&lt;/h2&gt;

&lt;p&gt;快速排序也是利用分治法实现的一个排序算法。快速排序和归并排序不同，它不是一半一半的分子数组，而是选择一个基准数，把比这个数小的挪到左边，把比这个数大的移到右边。然后不断对左右两部分也执行相同步骤，直到整个数组有序。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用一个基准数将数组分成两个子数组&lt;/li&gt;
  &lt;li&gt;将大于基准数的移到右边，小于的移到左边&lt;/li&gt;
  &lt;li&gt;递归的对子数组重复执行1，2，直到整个数组有序&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;```CPP
void quick_sort(vector&lt;int&gt; &amp;amp;nums, int b, int e, vector&lt;int&gt; &amp;amp;temp)
{
    int m = (b + e) / 2;
    if (m != b) {
        int lb = b, rb = e - 1;&lt;/int&gt;&lt;/int&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    for (int i = b; i &amp;lt; e; i++) {
        if (i == m)
            continue;
        if (nums[i] &amp;lt; nums[m])
            temp[lb++] = nums[i];
        else
            temp[rb--] = nums[i];
    }
    temp[lb] = nums[m];
    
    for (int i = b; i &amp;lt; e; i++)
        nums[i] = temp[i];
    
    quick_sort(nums, b, lb, temp);
    quick_sort(nums, lb + 1, e, temp);
} } ```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;解法2: 不需要辅助空间&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CPP
void quick_sort(vector&amp;lt;int&amp;gt; &amp;amp;nums, int b, int e)
{
    if (b &amp;lt; e - 1) {
        int lb = b, rb = e - 1;
        while (lb &amp;lt; rb) {
            while (nums[rb] &amp;gt;= nums[b] &amp;amp;&amp;amp; lb &amp;lt; rb)
                rb--;
            while (nums[lb] &amp;lt;= nums[b] &amp;amp;&amp;amp; lb &amp;lt; rb)
                lb++;
            swap(nums[lb], nums[rb]);
        }
        swap(nums[b], nums[lb]);
        quick_sort(nums, b, lb);
        quick_sort(nums, lb + 1, e);
    }
}
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;复杂度分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;快速排序也是一个不稳定排序，时间复杂度看&lt;a href=&quot;https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F#.E5.B9.B3.E5.9D.87.E8.A4.87.E9.9B.9C.E5.BA.A6&quot;&gt;维基百科&lt;/a&gt;。空间复杂度是&lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;heap-sort&quot;&gt;7. 堆排序（Heap Sort）&lt;/h2&gt;

&lt;p&gt;堆排序经常用于求一个数组中最大k个元素时。因为堆实际上是一个完全二叉树，所以用它可以用一维数组来表示。因为最大堆的第一位总为当前堆中最大值，所以每次将最大值移除后，调整堆即可获得下一个最大值，通过一遍一遍执行这个过程就可以得到前k大元素，或者使堆有序。&lt;/p&gt;

&lt;p&gt;在了解算法之前，首先了解在一维数组中节点的下标：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;i节点的父节点 parent(i) = floor((i-1)/2)&lt;/li&gt;
  &lt;li&gt;i节点的左子节点 left(i) = 2i + 1&lt;/li&gt;
  &lt;li&gt;i节点的右子节点 right(i) = 2i + 2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;步骤&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;构造最大堆（Build Max Heap）：首先将当前元素放入最大堆下一个位置，然后将此元素依次和它的父节点比较，如果大于父节点就和父节点交换，直到比较到根节点。重复执行到最后一个元素。&lt;/li&gt;
  &lt;li&gt;最大堆调整（Max Heapify）：调整最大堆即将根节点移除后重新整理堆。整理方法为将根节点和最后一个节点交换，然后把堆看做n-1长度，将当前根节点逐步移动到其应该在的位置。&lt;/li&gt;
  &lt;li&gt;堆排序（HeapSort）：重复执行2，直到所有根节点都已移除。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;```CPP
void heap_sort(vector&lt;int&gt; &amp;amp;nums)
{
    int n = nums.size();
    for (int i = n / 2 - 1; i &amp;gt;= 0; i--) { // build max heap
        max_heapify(nums, i, nums.size() - 1);
    }&lt;/int&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for (int i = n - 1; i &amp;gt; 0; i--) { // heap sort
    int temp = nums[i];
    num[i] = nums[0];
    num[0] = temp;
    max_heapify(nums, 0, i);
} }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;void max_heapify(vector&lt;int&gt; &amp;amp;nums, int beg, int end)
{
    int curr = beg;
    int child = curr * 2 + 1;
    while (child &amp;lt; end) {
        if (child + 1 &amp;lt; end &amp;amp;&amp;amp; nums[child] &amp;lt; nums[child + 1]) {
            child++;
        }
        if (nums[curr] &amp;lt; nums[child]) {
            int temp = nums[curr];
            nums[curr] = nums[child];
            num[child] = temp;
            curr = child;
            child = 2 * curr + 1;
        } else {
            break;
        }
    }
}
```&lt;/int&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;复杂度分析&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;堆执行一次调整需要&lt;code class=&quot;highlighter-rouge&quot;&gt;O(logn)&lt;/code&gt;的时间，在排序过程中需要遍历所有元素执行堆调整，所以最终时间复杂度是&lt;code class=&quot;highlighter-rouge&quot;&gt;O(nlogn)&lt;/code&gt;。空间复杂度是&lt;code class=&quot;highlighter-rouge&quot;&gt;O(n)&lt;/code&gt;。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;0. 参考&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;维基百科&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://wuchong.me/blog/2014/02/09/algorithm-sort-summary/&quot;&gt;经典排序算法总结与实现&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://segmentfault.com/a/1190000002466215&quot;&gt;堆排序C++实现&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://bubkoo.com/2014/01/14/sort-algorithm/heap-sort/&quot;&gt;常见排序算法 - 堆排序 (Heap Sort)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>使用 Zipcar 在加州租车</title>
        <link>http://zhaohangbo.me/2015/04/13/rent-car-by-zipcar.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2015/04/13/rent-car-by-zipcar.html</guid>
        <pubDate>Mon, 13 Apr 2015 00:00:00 -0700</pubDate>
        <description>&lt;blockquote&gt;
  &lt;p&gt;在洛杉矶这个“大饼”中生活，没有车真的是各种艰难。2月初把驾照考过了，接下来就考虑买车或者租车。买车算了算不是很划算，而且对车也不太懂，就考虑先租车。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;在 &lt;a href=&quot;http://transnet.usc.edu/index.php/getting-around/&quot;&gt;USC Transportation&lt;/a&gt; 上排名最靠前的两个公司是 Enterprise 和 Zipcar。前者是传统的租车公司，后者稍微不一样一点。我还没有在 Enterprise 上租过车，所以先说说 Zipcar.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;zipcar-&quot;&gt;Zipcar 简介&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zipcar.com&quot;&gt;Zipcar&lt;/a&gt; 是会员制的，在注册以后会给发一张 Zipcard 过来，有了这张卡你就可以随时去订车和提车了。Zipcar 不像其他租车行一样你得去固定地方统一取车，它的车就停在路边，他们有固定的停车位。来看一下 Zipcar 在 USC 附近的停车点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7u2ho6.com1.z0.glb.clouddn.com/life-zipcar-map.png&quot; alt=&quot;zipcar map&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;zipcar--1&quot;&gt;Zipcar 使用&lt;/h2&gt;

&lt;h3 id=&quot;section&quot;&gt;1. 注册获得会员卡&lt;/h3&gt;

&lt;p&gt;大部分学校应该都和 Zipcar 有合作，所以注册之前应该去学校网站看一下。学生可以将会员费缩减到 25刀/年。&lt;/p&gt;

&lt;p&gt;注册地址在&lt;a href=&quot;http://members.zipcar.com/registration&quot;&gt;这里&lt;/a&gt;，注册的时候去搜一下 Promo Code，我就是注册完才看到一个免费40刀的 Code T_T。在美国注册帐号一看到 Code 填空就应该去搜搜~&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;2. 租车&lt;/h3&gt;

&lt;p&gt;租车可以在网站上或者手机 APP 上进行。租车非常方便，只要选择相应车辆，以及使用时间预订即可。然后在预订时间的前15分钟内取车。取车很简单，拿自己的 Zipcard 刷一下车前部的一个感应器门就开了。然后上车发动走人。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;3. 加油&lt;/h3&gt;

&lt;p&gt;Zipcar 租的车带了加油卡，就在司机座位上面。虽然看起来比较贴心，但是这个卡经常不能用，因为它似乎是个信用卡，然后一旦有人尝试多次失败就被锁了，导致后面的人们也不能用。&lt;/p&gt;

&lt;p&gt;加油卡的使用方式是：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;刷一下加油卡 (Gas Card)&lt;/li&gt;
  &lt;li&gt;输入汽车里程表上的数&lt;/li&gt;
  &lt;li&gt;输入 Zipcard 上面那个 6 位的 Gas ID&lt;/li&gt;
  &lt;li&gt;加油&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果加油卡失效，这个时候会提示：Find your cashier。不用担心，直接用自己的信用卡加油就好了，然后记得要收据 (Receipt)，然后把收据发到 support@zipcar.com 报销就好。记得在邮件里加上自己的 Zipcard ID.&lt;/p&gt;

&lt;h3 id=&quot;section-3&quot;&gt;4. 还车&lt;/h3&gt;

&lt;p&gt;还车记得一定要还到原车的位置。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;5. 保险&lt;/h3&gt;

&lt;p&gt;在帐号注册的时候有个保险选项&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://7u2ho6.com1.z0.glb.clouddn.com/life-zipcar-damage-fee.png&quot; alt=&quot;damage fee&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我建议选择那个complete waiver，毕竟开车难免磕碰。&lt;/p&gt;

&lt;h2 id=&quot;section-5&quot;&gt;注意&lt;/h2&gt;

&lt;h3 id=&quot;section-6&quot;&gt;1. 逾期罚款&lt;/h3&gt;

&lt;p&gt;租车的时候宁可多不可少，因为逾期惩罚是非常重的，应该是一个小时50刀左右。&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Mac 常用资源</title>
        <link>http://zhaohangbo.me/2014/08/03/general-mac-resources.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2014/08/03/general-mac-resources.html</guid>
        <pubDate>Sun, 03 Aug 2014 00:00:00 -0700</pubDate>
        <description>&lt;h2 id=&quot;section&quot;&gt;常用软件&lt;/h2&gt;

&lt;h3 id=&quot;alfred&quot;&gt;Alfred&lt;/h3&gt;

&lt;h4 id=&quot;alfredworkflow&quot;&gt;Alfred常用Workflow&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://kapeli.com/dash&quot;&gt;Dash&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/liberize/alfred-dict-workflow&quot;&gt;Dict - Lookup Word&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.alfredforum.com/topic/917-reminders/&quot;&gt;Reminders&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://support.alfredapp.com/evernote&quot;&gt;Evernote&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.alfredforum.com/topic/1009-notes/&quot;&gt;Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;section-1&quot;&gt;常用命令&lt;/h2&gt;

&lt;h3 id=&quot;dashboard&quot;&gt;开启关闭dashboard&lt;/h3&gt;

&lt;p&gt;关闭&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaults write com.apple.dashboard mcx-disabled -boolean YES
killall Dock
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;开启&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;defaults write com.apple.dashboard mcx-disabled -boolean NO
killall Dock
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;剪贴板操作&lt;/h3&gt;
&lt;p&gt;写入剪切板&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo &#39;test&#39; &amp;gt; pbcopy 
cat testfile &amp;gt; pbcopy
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;读取剪贴板&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pbpaste &amp;gt; testfile
pbpaste | cat
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;hidpi&quot;&gt;开启关闭Hidpi&lt;/h3&gt;
&lt;p&gt;开启&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool YES
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;关闭&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo defaults delete /Library/Preferences/com.apple.windowserver DisplayResolutionDisabled
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;dock&quot;&gt;修改Dock隐藏和出现时间&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
defaults write com.apple.dock autohide-delay -int 0
defaults write com.apple.dock autohide-time-modifier -float 0.4
killall Dock
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;itermoptionaltmeta&quot;&gt;设置iterm中option为alt(meta)键&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;http://7u2ho6.com1.z0.glb.clouddn.com/resource-set-meta-to-alt.png&quot; alt=&quot;option-to-meta&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;dropbox&quot;&gt;删除dropbox冲突文件&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;find . -type f -name &quot;* conflicted *&quot; -exec rm -f {} \;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;launchpad&quot;&gt;清空Launchpad（删除掉）&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sqlite3 ~/Library/Application\ Support/Dock/*.db &#39;DELETE FROM apps;&#39; &amp;amp;&amp;amp; killall Dock
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;launchpad-1&quot;&gt;重置Launchpad&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rm -f ~/Library/Application\ Support/Dock/*.db &amp;amp;&amp;amp; killall Dock
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;finder&quot;&gt;修改Finder中文件夹显示语言&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# 以Desktop为例
touch ~/Desktop/.localized
chmod 600 ~/Desktop/.localized
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-3&quot;&gt;常用快捷键&lt;/h2&gt;

&lt;h3 id=&quot;chrome&quot;&gt;Chrome&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;切换用户 &lt;code class=&quot;highlighter-rouge&quot;&gt;Command + shift + M&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>Vagrant</title>
        <link>http://zhaohangbo.me/2014/04/10/vagrant.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2014/04/10/vagrant.html</guid>
        <pubDate>Thu, 10 Apr 2014 00:00:00 -0700</pubDate>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Vagrant是一款用来构建虚拟开发环境的工具，它其实算是一个跨平台的虚拟机管理工具。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;安装&lt;/h2&gt;

&lt;h3 id=&quot;vagran&quot;&gt;安装Vagran&lt;/h3&gt;
&lt;p&gt;Vagrant的旧版本是可以通过gem来安装的，但是由于依赖实在太多，官方放弃了这种安装方式，建议下载官方安装包来安装。&lt;/p&gt;

&lt;p&gt;下载地址在&lt;a href=&quot;http://www.vagrantup.com/downloads&quot;&gt;http://www.vagrantup.com/downloads&lt;/a&gt;。下载好pkg包后，点击安装即可。&lt;/p&gt;

&lt;h3 id=&quot;virtualbox&quot;&gt;安装Virtualbox&lt;/h3&gt;
&lt;p&gt;Vagrant依赖现有的虚拟机软件来管理虚拟机，如Virtualbox, Vmware Fusion, Parallel Desktop等，其中最方便的是VirtualBox，所以我选择了Virtualbox。&lt;/p&gt;

&lt;p&gt;下载地址在&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;https://www.virtualbox.org/wiki/Downloads&lt;/a&gt;。同样下载好后直接安装。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;使用&lt;/h2&gt;

&lt;h3 id=&quot;box&quot;&gt;下载启动Box&lt;/h3&gt;
&lt;p&gt;在Vagrant中，box是一种打包好的镜像，通过这个镜像，可以生成相应的虚拟机。box可以通过&lt;a href=&quot;http://www.vagrantbox.es/&quot;&gt;官方网站&lt;/a&gt;下载，也可以自己制作，在团队内分享。&lt;/p&gt;

&lt;p&gt;官方的Box可以在创建时自动下载。例如以下步骤&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/Documents/Vagrant/Ubuntu  # 进入一个vagrant虚拟机目录，一个目录管理一个虚拟机
vagrant init hashicorp/precise32 # 创建一个ubuntu的虚拟机
vagrant up # 启动这个虚拟机
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;通过这个步骤，vagrant会去box列表中找&lt;code class=&quot;highlighter-rouge&quot;&gt;hashicorp/precise32&lt;/code&gt;这个镜像，如果没有就去官方下载。Box被保存在&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.vagrant&lt;/code&gt;下。通过命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box list 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以查看已经下载的box。如果想以这个box再建立一个虚拟机，只要再创建一个目录，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;~/Documents/Vagrant/Ubuntu32&lt;/code&gt;，然后执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant init hashicorp/precise32
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;即可。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;操作虚拟机&lt;/h3&gt;
&lt;p&gt;操作虚拟机时，必须进入刚刚建立的目录中去，这个目录中必须含有&lt;code class=&quot;highlighter-rouge&quot;&gt;init&lt;/code&gt;命令建立的Vagrantfile文件。常用命令有&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ vagrant init  # 初始化
$ vagrant up  # 启动虚拟机
$ vagrant halt  # 关闭虚拟机
$ vagrant reload  # 重启虚拟机
$ vagrant ssh  # SSH 至虚拟机
$ vagrant status  # 查看虚拟机运行状态
$ vagrant destroy  # 销毁当前虚拟机
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;共享文件夹&lt;/h3&gt;
&lt;p&gt;通过Vagrant建立的虚拟机和Mac共享文件非常容易，虚拟机中&lt;code class=&quot;highlighter-rouge&quot;&gt;/vagrant&lt;/code&gt;目录会映射到我们本地虚拟机目录中。例如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd ~/Documents/Vagrant/Ubuntu
vagrant up
vagrant ssh
cd /vagrant
ls
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这个时候，我们会看到，这里显示的文件和&lt;code class=&quot;highlighter-rouge&quot;&gt;~/Documents/Vagrant/Ubuntu&lt;/code&gt;下是一样的。&lt;/p&gt;

&lt;h3 id=&quot;box-1&quot;&gt;共享Box&lt;/h3&gt;
&lt;p&gt;如果只有上述功能的话，那么Vagrant的作用就不是那么&lt;code class=&quot;highlighter-rouge&quot;&gt;杀手级&lt;/code&gt;了。通过命令&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant package
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;可以将一个虚拟机打包成Box，供别人使用。别人只要用打包的box来创建一个虚拟机即可，例如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vagrant box add myubuntu ~/Documents/Vagrant/Ubunutu/ubunut.box
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.vagrantup.com/v2/&quot;&gt;Vagrant Docs&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://blog.segmentfault.com/fenbox/1190000000264347&quot;&gt;使用 Vagrant 打造跨平台开发环境&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      </item>
    
      <item>
        <title>Docker</title>
        <link>http://zhaohangbo.me/2014/04/10/docker.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2014/04/10/docker.html</guid>
        <pubDate>Thu, 10 Apr 2014 00:00:00 -0700</pubDate>
        <description>&lt;h2 id=&quot;macdocker&quot;&gt;在Mac下安装使用Docker&lt;/h2&gt;
&lt;p&gt;Docker暂时并不支持原生的Mac系统，所以Mac下的Docker实际上是依赖一个很小的linux虚拟机来实现的。&lt;/p&gt;

&lt;h3 id=&quot;virtualbox&quot;&gt;安装Virtualbox&lt;/h3&gt;
&lt;p&gt;Vagrant依赖现有的虚拟机软件来管理虚拟机，如Virtualbox, Vmware Fusion, Parallel Desktop等，其中最方便的是VirtualBox，所以我选择了Virtualbox。&lt;/p&gt;

&lt;p&gt;下载地址在&lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;https://www.virtualbox.org/wiki/Downloads&lt;/a&gt;。下载好后直接安装。&lt;/p&gt;

&lt;h3 id=&quot;boot2docker&quot;&gt;安装Boot2Docker&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/boot2docker/boot2docker&quot;&gt;Boot2Docker&lt;/a&gt;是帮助控制虚拟机中Docker的工具，它会下载一个安装好docker的虚拟机，并控制其实现docker功能。&lt;/p&gt;

&lt;p&gt;在mac下安装boot2docker只要执行&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew install boot2docker
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;即可。&lt;/p&gt;

&lt;h3 id=&quot;docker-client&quot;&gt;安装docker client&lt;/h3&gt;
&lt;p&gt;要想在mac下直接执行docker命令，需要安装一个适合mac的docker client，安装方法如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Get the docker client file
DIR=$(mktemp -d ${TMPDIR:-/tmp}/dockerdl.XXXXXXX) &amp;amp;&amp;amp; \
curl -f -o $DIR/ld.tgz https://get.docker.io/builds/Darwin/x86_64/docker-latest.tgz &amp;amp;&amp;amp; \
gunzip $DIR/ld.tgz &amp;amp;&amp;amp; \
tar xvf $DIR/ld.tar -C $DIR/ &amp;amp;&amp;amp; \
cp $DIR/usr/local/bin/docker ./docker

# Set the environment variable for the docker daemon
export DOCKER_HOST=tcp://127.0.0.1:4243

# Copy the executable file
sudo cp docker /usr/local/bin/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这样就有一个docker命令了&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;使用&lt;/h2&gt;
&lt;p&gt;使用docker安装需要先启动boot2docker虚拟机&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# Initiate the VM
boot2docker init

# Run the VM (the docker daemon)
boot2docker up

# To see all available commands:
boot2docker
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;之后就可以使用docker命令了&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker version
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;section-1&quot;&gt;参考&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.docker.io/en/latest/installation/mac/&quot;&gt;How To Install Docker On Mac OS X&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/boot2docker/boot2docker&quot;&gt;boot2docker&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      </item>
    
      <item>
        <title>待读书单</title>
        <link>http://zhaohangbo.me/2014/03/14/book-list-of-2014.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2014/03/14/book-list-of-2014.html</guid>
        <pubDate>Fri, 14 Mar 2014 00:00:00 -0700</pubDate>
        <description>&lt;h2 id=&quot;section&quot;&gt;浪潮之巅&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;status: 待读&lt;/li&gt;
  &lt;li&gt;author: 吴军&lt;/li&gt;
  &lt;li&gt;language: 中文&lt;/li&gt;
  &lt;li&gt;link: http://book.douban.com/subject/6709783/&lt;/li&gt;
  &lt;li&gt;cover: http://7u2ho6.com1.z0.glb.clouddn.com/book-on-top-of-tides.jpg&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;outlier&quot;&gt;Outlier&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;status: 待读&lt;/li&gt;
  &lt;li&gt;author: Malcolm Gladwell&lt;/li&gt;
  &lt;li&gt;language: 英文&lt;/li&gt;
  &lt;li&gt;tag: 成功学，方法论&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;living-beautifully-with-uncertainty-and-change&quot;&gt;Living Beautifully with Uncertainty and Change&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;status: 已读&lt;/li&gt;
  &lt;li&gt;author: Pema Chodron&lt;/li&gt;
  &lt;li&gt;language: 英文&lt;/li&gt;
  &lt;li&gt;tag: 哲学宗教，藏族佛学&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;cracking-the-coding-interview&quot;&gt;Cracking the Coding Interview&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;status: 未读&lt;/li&gt;
  &lt;li&gt;author: Gayle Laakmann McDowell&lt;/li&gt;
  &lt;li&gt;language: 英文&lt;/li&gt;
  &lt;li&gt;tag: 算法，工作，面试&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>Shell 常用资源</title>
        <link>http://zhaohangbo.me/2014/01/15/general-shell-resources.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2014/01/15/general-shell-resources.html</guid>
        <pubDate>Wed, 15 Jan 2014 00:00:00 -0800</pubDate>
        <description>&lt;h2 id=&quot;section&quot;&gt;常用指令&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;文本内容搜索&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;grep aaa * 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;文件夹操作&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;查看文件夹大小   du -h --max-depth=1 /home/ys
查看驱动器空间   df -h 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;压缩命令&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tar zxvf aaa.tar.gz
tar zcvf aaa.tar.gz aaa
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;登陆到其他用户&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;login
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;查看端口的占用&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsof -i:8087  查看8087端口的使用
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-6&quot;&gt;批量杀死进程&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps -aux|grep name|grep -v grep|cut -c 9-15|xargs kill -9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-7&quot;&gt;查看当前时间&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;date       时间
date +%s   时间戳
date -d &quot;2010-07-20 10:25:30&quot; +%s  指定时间时间戳
date -d &quot;@1279592730&quot;    时间戳转时间
date -d &quot;1970-01-01 14781 days&quot; &quot;+%Y/%m/%d %H:%M:%S&quot; 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-8&quot;&gt;查看进程内存使用情况&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;top -d 1 -p pid [,pid ...]
pmap pid 
ps aux|grep process_name
查看/proc/process_id/文件夹下的status文件
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;linux&quot;&gt;查看Linux内核版本或发布版本&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsb_release -a
uname -a
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;http&quot;&gt;一句话实现一个HTTP服务，把当前文件夹作为根目录&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python -m SimpleHTTPServer
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-9&quot;&gt;查看本地网络服务活动状态&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lsof -i
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ip&quot;&gt;查看自己的外网ip&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl ifconfig.me
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-10&quot;&gt;下载整个网站&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget --random-wait -r -p -e robots=off -U mozilla http://www.example.com
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-11&quot;&gt;后台运行一段不中止的程序，并可随时查看它的状态&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;screen -d -m -S some_ name ping my_router
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-12&quot;&gt;查看进程执行的时间&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ps -A -opid,stime,etime,args | grep python
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-13&quot;&gt;创建守护进程&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nohup python /var/www/a.py &amp;amp;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-14&quot;&gt;查看当前文件夹下文件（文件夹）大小&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;du -h --max-depth=1 .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-15&quot;&gt;查看所有磁盘大小&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;df -h
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-16&quot;&gt;诊断网络&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mtr 
ping
traceroute
dig
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-17&quot;&gt;列出本机监听的端口号&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netstat –tlnp
netstat -anop
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-18&quot;&gt;在远程机器上运行一段脚本&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh user@server bash &amp;lt; /path/to/local/script.sh
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-19&quot;&gt;端口扫描&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;nc -z -v -n 127.0.0.1 20-100
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;google20&quot;&gt;负载测试，30秒内向Google发起20个并发连接&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;siege -c20 www.google.co.uk -b -t30s
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
      </item>
    
      <item>
        <title>Python 常用资源</title>
        <link>http://zhaohangbo.me/2014/01/15/general-python-resources.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2014/01/15/general-python-resources.html</guid>
        <pubDate>Wed, 15 Jan 2014 00:00:00 -0800</pubDate>
        <description>&lt;h2 id=&quot;section&quot;&gt;常用代码&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;遍历对象&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;for key in a.__dict__:
    print key,&#39;:&#39;,a.__dict__[key]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;调试方法&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;assert False   //引发异常，观察错误界面
import logging
logging.info(&#39;&#39;)  //写日志
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;获得当前时间&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#时间戳
time.time()
#日期时间
time.ctime()
#iso时间
datetime.fromtimestamp(time.time()).isoformat()
#固定格式
time.strftime(&#39;%Y-%m-%d&#39;,time.localtime(time.time())) ### 日期到时间戳
dateC=datetime.datetime(2010,6,6,8,14,59)
timestamp=time.mktime(dateC.timetuple()) ### 时间戳到日期
ltime=time.localtime(1237515355.0)
timeStr=time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;, ltime) ### 之后的包从绝对位置导入
from __future__ import absolute_import
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

</description>
      </item>
    
      <item>
        <title>JavaScript 常用资源</title>
        <link>http://zhaohangbo.me/2014/01/15/general-javascript-resources.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2014/01/15/general-javascript-resources.html</guid>
        <pubDate>Wed, 15 Jan 2014 00:00:00 -0800</pubDate>
        <description>&lt;h2 id=&quot;section&quot;&gt;常用代码&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;字符串截取&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;substr(start [, length ])
返回一个从指定位置开始的指定长度的子字符串
substring(start, end)
返回位于 String 对象中指定位置的子字符串。
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;页面跳转&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window.navigate(&quot;top.jsp&quot;);
window.history.back(-1);
window.location.href=&quot;login.jsp?backurl=&quot;+window.location.href; 
self.location=&#39;top.htm&#39;;
top.location=&#39;xx.jsp&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;加载完成&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;window.onload 
必须等页面内包括图片的所有元素加载完成后才能执行。
不能同时编写多个，只执行一个
$(document).ready()
是DOM结构绘制完毕后就可以执行
可以编写多个
简写$(function(){});
$(window).load()等同与window.onload
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;刷新页面&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;history.go(0) 
location.reload() 
location=location 
location.assign(location) 
document.execCommand(&#39;Refresh&#39;) 
window.navigate(location) 
location.replace(location) 
document.URL=location.href 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;json&quot;&gt;json转化和解析&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;JSON.parse(&quot;{a:&#39;111&#39;,b:&#39;ccc&#39;}&quot;);  //解析
eval(&quot;(&quot;+&quot;&quot;+&quot;)&quot;); //解析
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-5&quot;&gt;时间转换&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var day1 = parseInt(new Date().valueOf()/1000); //获得当前时间时间戳
day2 = new Date(day1*1000);
alert(day2.getFullYear()+&quot;-&quot;+(day2.getMonth()+1)+&quot;-&quot;+day2.getDate()+&quot; &quot;+day2.getHours()+&quot;:&quot;+day2.getMinutes()+&quot;:&quot;+day2.getSeconds())
d = new Date();
s = d.getFullYear() + &quot;-&quot;;
s += (&quot;0&quot;+(d.getMonth()+1)).slice(-2) + &quot;-&quot;;
s += (&quot;0&quot;+d.getDate()).slice(-2) + &quot; &quot;;
s += (&quot;0&quot;+d.getHours()).slice(-2) + &quot;:&quot;;
s += (&quot;0&quot;+d.getMinutes()).slice(-2) + &quot;:&quot;;
s += (&quot;0&quot;+d.getSeconds()).slice(-2) + &quot;.&quot;;
s += (&quot;00&quot;+d.getMilliseconds()).slice(-3);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;uri&quot;&gt;URI编码转换&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var a=&quot;&#39;:&#39;&quot;;
en = encodeURI(a);    //编码
a = decodeURI(en);    //解码
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;html&quot;&gt;HTML编码转换&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function htmlEncode(value){
  return $(&#39;&amp;lt;div/&amp;gt;&#39;).text(value).html();
}

function htmlDecode(value){
  return $(&#39;&amp;lt;div/&amp;gt;&#39;).html(value).text();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
      </item>
    
      <item>
        <title>Git 常用资源</title>
        <link>http://zhaohangbo.me/2014/01/15/general-git-resources.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2014/01/15/general-git-resources.html</guid>
        <pubDate>Wed, 15 Jan 2014 00:00:00 -0800</pubDate>
        <description>&lt;h2 id=&quot;section&quot;&gt;库管理&lt;/h2&gt;

&lt;h3 id=&quot;section-1&quot;&gt;克隆库&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git clone https://github.com/php/php-src.git
git clone --depth=1 https://github.com/php/php-src.git # 只抓取最近的一次 commit
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;历史管理&lt;/h2&gt;

&lt;h3 id=&quot;section-3&quot;&gt;查看历史&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git log --pretty=oneline filename # 一行显示
git show xxxx # 查看某次修改
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;标签功能&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash    
git tag # 显示所有标签
git tag -l &#39;v1.4.2.*&#39; # 显示 1.4.2 开头标签
git tag v1.3 # 简单打标签   
git tag -a v1.2 9fceb02 # 后期加注标签
git tag -a v1.4 -m &#39;my version 1.4&#39; # 增加标签并注释， -a 为 annotated 缩写
git show v1.4 # 看某一标签详情
git push origin v1.5 # 分享某个标签
git push origin --tags # 分享所有标签
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;回滚操作&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git reset 9fceb02 # 保留修改
git reset 9fceb02 --hard # 删除之后的修改
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;取消文件的修改&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git checkout -- a.php #  取消单个文件
git checkout -- # 取消所有文件的修改
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-7&quot;&gt;删除文件&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git rm a.php  # 直接删除文件
git rm --cached a.php # 删除文件暂存状态
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-8&quot;&gt;移动文件&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git mv a.php ./test/a.php
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-9&quot;&gt;查看文件修改&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git diff          # 查看未暂存的文件更新 
git diff --cached # 查看已暂存文件的更新 
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;staging&quot;&gt;暂存和恢复当前staging&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git stash # 暂存当前分支的修改
git stash apply # 恢复最近一次暂存
git stash list # 查看暂存内容
git stash apply stash@{2} # 指定恢复某次暂存内容
git stash drop stash@{0} # 删除某次暂存内容
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;commit-&quot;&gt;修改 commit 历史纪录&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git rebase -i 0580eab8
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-10&quot;&gt;分支管理&lt;/h2&gt;

&lt;h3 id=&quot;section-11&quot;&gt;创建分支&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git branch develop # 只创建分支
git checkout -b master develop # 创建并切换到 develop 分支
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-12&quot;&gt;合并分支&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git checkout master # 切换到 master 分支
git merge --no-ff develop # 把 develop 合并到 master 分支，no-ff 选项的作用是保留原分支记录
git rebase develop # rebase 当前分支到 develop
git branch -d develop # 删除 develop 分支
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-13&quot;&gt;克隆远程分支&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git branch -r # 显示所有分支，包含远程分支
git checkout origin/android
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;develop&quot;&gt;修复develop上的合并错误&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;将merge前的commit创建一个分之，保留merge后代码&lt;/li&gt;
  &lt;li&gt;将develop &lt;code class=&quot;highlighter-rouge&quot;&gt;reset --force&lt;/code&gt;到merge前，然后&lt;code class=&quot;highlighter-rouge&quot;&gt;push --force&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;在分支中rebase develop&lt;/li&gt;
  &lt;li&gt;将分支push到服务器上重新merge&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-14&quot;&gt;强制更新到远程分支最新版本&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git reset --hard origin/master
git submodule update --remote -f
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;submodule&quot;&gt;Submodule使用&lt;/h2&gt;

&lt;h3 id=&quot;submodule-1&quot;&gt;克隆带submodule的库&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git clone --recursive https://github.com/chaconinc/MainProject
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;cloneclone-submodule&quot;&gt;clone主库后再去clone submodule&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git clone https://github.com/chaconinc/MainProject
git submodule init
git submodule update
&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;git&quot;&gt;Git设置&lt;/h2&gt;

&lt;p&gt;Git的全局设置在&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gitconfig&lt;/code&gt;中，单独设置在&lt;code class=&quot;highlighter-rouge&quot;&gt;project/.git/config&lt;/code&gt;下。&lt;/p&gt;

&lt;p&gt;忽略设置全局在&lt;code class=&quot;highlighter-rouge&quot;&gt;~/.gitignore_global&lt;/code&gt;中，单独设置在&lt;code class=&quot;highlighter-rouge&quot;&gt;project/.gitignore&lt;/code&gt;下。&lt;/p&gt;

&lt;h3 id=&quot;commit--1&quot;&gt;设置 commit 的用户和邮箱&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git config user.name &quot;xx&quot;
git config user.email &quot;xx@xx.com&quot;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;或者直接修改config文件&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
[user]
    name = xxx
    email = xxx@xxx.com
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;section-15&quot;&gt;查看设置项&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git config --list
&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;git-1&quot;&gt;设置git终端颜色&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bash
git config --global color.diff auto
git config --global color.status auto
git config --global color.branch auto
&lt;/code&gt;&lt;/p&gt;
</description>
      </item>
    
      <item>
        <title>Linux</title>
        <link>http://zhaohangbo.me/2013/12/08/linux.html</link>
        <guid isPermaLink="true">http://zhaohangbo.me/2013/12/08/linux.html</guid>
        <pubDate>Sun, 08 Dec 2013 00:00:00 -0800</pubDate>
        <description>&lt;blockquote&gt;
  &lt;p&gt;有的时候执行一些简单指令的时候总不想分好几次输入，利用以下方法可以方便的一次执行多个命令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;linux&quot;&gt;Linux下多个命令连续执行方法&lt;/h3&gt;

&lt;p&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;;&lt;/code&gt;可以让多个命令连续知行，中间出现错误并不会中断后面命令，如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir test; mkdir test; rmdir test;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;虽然第二条指令会报错，但是不会影响后面的指令，最后test目录不存在&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;出错停止后面指令&lt;/h3&gt;

&lt;p&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt;分割的命令，如果没有错误会一直执行下去，出现错误立即中止，如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir test &amp;amp;&amp;amp; mkdir test &amp;amp;&amp;amp; rmdir test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这回在第二个指令处就中止了&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;一次正确即停止&lt;/h3&gt;

&lt;p&gt;用&lt;code class=&quot;highlighter-rouge&quot;&gt;||&lt;/code&gt;分割的命令，如果有错误就一直执行下去，直到一次正确立即中止，如&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mkdir test || mkdir test || rmdir test
mkdir test || mkdir test || rmdir test || mkdir test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;第一次执行第一条指令就正确，后面的不执行&lt;/p&gt;

&lt;p&gt;第二次执行前两条都错误，直到最后一条才正确，最后一条不再执行&lt;/p&gt;
</description>
      </item>
    
  </channel>
</rss>